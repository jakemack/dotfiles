#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="$HOME/.dotfiles"
REPO_URL='https://github.com/jakemack/dotfiles.git'

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

install_homebrew () {
  if test ! $(which brew)
  then
    info "  Installing Homebrew for you."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
  # Upgrade homebrew
  info "› brew update"
  brew update | while read line; do info "$line"; done
}

clone_repo () {
  if [ -d "$DOTFILES_ROOT" ]
  then
    cd "$DOTFILES_ROOT"
    if [ ! "$(ls -A "$DOTFILES_ROOT")" ]
    then
      info "$DOTFILES_ROOT exists but is empty, cloning repo"
      git clone "$REPO_URL" "$DOTFILES_ROOT"
    elif [ ! -d '.git' ] || [ "$(git config --get remote.origin.url)" != "$REPO_URL" ]
    then
      fail "Data in $DOTFILES_ROOT, cannot clone repo"
    fi
    cd "$old_dir"
  else
    git clone "$REPO_URL" "$DOTFILES_ROOT"
  fi
  cd "$DOTFILES_ROOT"
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_zsh () {
  grep -qF "$(which zsh)" /etc/shells || echo "$(which zsh)" | sudo tee --append /etc/shells

  OH_MY_ZSH=~/.oh-my-zsh
  if [ ! -d "$OH_MY_ZSH" ]
  then
    info 'Installing Oh My Zsh'
    git clone --depth=1 https://github.com/robbyrussell/oh-my-zsh.git "$OH_MY_ZSH" || {
      printf "Error: git clone of oh-my-zsh repo failed\n"
      exit 1
    }

    chsh -s "$(which zsh)"
  else
    info 'Oh My Zsh already installed, skipping'
  fi
}

set_up_structure() {
  if [ ! -d "$HOME/code" ]; then mkdir "$HOME/code"; fi
  if [ ! -d "$HOME/code/workspace" ]; then mkdir "$HOME/code/workspace"; fi
  if [ ! -d "$HOME/code/play" ]; then mkdir "$HOME/code/play"; fi
  if [ ! -d "$HOME/vbox" ]; then mkdir "$HOME/vbox"; fi
}

#install_github() {
#  eval $(op signin my)
#  op get item github.com | jq -r '.details.sections[] | select(.title == "Auth").fields[] | select(.t == "Access Token").v'
#}

install_homebrew
clone_repo
setup_gitconfig

# Run Homebrew through the Brewfile
info "› brew bundle"
brew bundle | while read line; do info "$line"; done

install_dotfiles
install_zsh

# Set macOS defaults
$DOTFILES_ROOT/macos/set-defaults.sh

# The Brewfile handles Homebrew-based app and library installs, but there may
# still be updates and installables in the Mac App Store. There's a nifty
# command line interface to it that we can use to just install everything, so
# yeah, let's do that.
info "› sudo softwareupdate -i -a"
sudo softwareupdate -i -a 2>&1 | while read line; do info "$line"; done

echo ''
echo '  All installed!'
